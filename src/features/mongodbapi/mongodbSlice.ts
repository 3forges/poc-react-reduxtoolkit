import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit"
import { RootState, AppThunk } from "../../app/store"
//import { fetchCount } from "./counterAPI"

export interface MongoDbState {
  value: object
  status: "idle" | "loading" | "failed"
}

const initialState: MongoDbState = {
  value: {},
  status: "idle",
}

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const incrementAsync = createAsyncThunk(
  "mongodb/fetchCount",
  async (amount: number) => {
    const response = { data: 0 } //await fetchCount(amount)
    // The value we return becomes the `fulfilled` action payload
    return response
  },
)

export const requestMongoDdAsync = createAsyncThunk(
  "mongodb/request",
  async () => {
    const response = await fetch("", { mode: "no-cors" })
    return response
  },
)

export const mongodbSlice = createSlice({
  name: "mongodb",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    increment: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      // state.value += 1
    },
    decrement: (state) => {
      // state.value -= 1
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementByAmount: (state, action: PayloadAction<number>) => {
      // state.value += action.payload
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(requestMongoDdAsync.pending, (state) => {
        state.status = "loading"
      })
      .addCase(requestMongoDdAsync.fulfilled, (state, action) => {
        state.status = "idle"
        state.value = action.payload
      })
      .addCase(requestMongoDdAsync.rejected, (state) => {
        state.status = "failed"
      })
  },
})

// export const { increment, decrement, incrementByAmount } = mongodbSlice.actions

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectInput = (state: RootState) => state.mongobd.value

export default mongodbSlice.reducer
